2024/05/21 09:54:20 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 1229840627
    GPU 0,1: NVIDIA GeForce RTX 3080 Ti
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.4, V11.4.48
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
    PyTorch: 1.11.0
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.12.0
    OpenCV: 4.9.0
    MMEngine: 0.10.2

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1229840627
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 2
------------------------------------------------------------

2024/05/21 09:54:20 - mmengine - INFO - Config:
_backend_args = None
_multiscale_resize_transforms = [
    dict(
        transforms=[
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
    dict(
        transforms=[
            dict(scale=(
                320,
                320,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    320,
                    320,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
    dict(
        transforms=[
            dict(scale=(
                960,
                960,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    960,
                    960,
                ),
                type='LetterResize'),
        ],
        type='Compose'),
]
affine_scale = 0.9
albu_train_transforms = [
    dict(p=0.01, type='Blur'),
    dict(p=0.01, type='MedianBlur'),
    dict(p=0.01, type='ToGray'),
    dict(p=0.01, type='CLAHE'),
]
backend_args = None
base_lr = 0.01
batch_shapes_cfg = None
close_mosaic_epochs = 6
custom_hooks = [
    dict(
        ema_type='ExpMomentumEMA',
        momentum=0.0001,
        priority=49,
        strict_load=False,
        type='EMAHook',
        update_buffers=True),
    dict(
        switch_epoch=30,
        switch_pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=True,
                pad_val=dict(img=114.0),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
            dict(
                border_val=(
                    114,
                    114,
                    114,
                ),
                max_aspect_ratio=100,
                max_rotate_degree=0.0,
                max_shear_degree=0.0,
                scaling_ratio_range=(
                    0.09999999999999998,
                    1.9,
                ),
                type='YOLOv5RandomAffine'),
            dict(
                bbox_params=dict(
                    format='pascal_voc',
                    label_fields=[
                        'gt_bboxes_labels',
                        'gt_ignore_flags',
                    ],
                    type='BboxParams'),
                keymap=dict(gt_bboxes='bboxes', img='image'),
                transforms=[
                    dict(p=0.01, type='Blur'),
                    dict(p=0.01, type='MedianBlur'),
                    dict(p=0.01, type='ToGray'),
                    dict(p=0.01, type='CLAHE'),
                ],
                type='mmdet.Albu'),
            dict(type='YOLOv5HSVRandomAug'),
            dict(prob=0.5, type='mmdet.RandomFlip'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'flip',
                    'flip_direction',
                ),
                type='mmdet.PackDetInputs'),
        ],
        type='mmdet.PipelineSwitchHook'),
]
data_root = '/media/iris/새 볼륨/nonslip_patching_paper/coco_format/'
dataset_type = 'YOLOv5CocoDataset'
deepen_factor = 0.67
default_hooks = dict(
    checkpoint=dict(
        interval=1, max_keep_ckpts=2, save_best='auto', type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(
        lr_factor=0.01,
        max_epochs=36,
        scheduler_type='linear',
        type='YOLOv5ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='mmdet.DetVisualizationHook'))
default_scope = 'mmyolo'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
img_scale = (
    640,
    640,
)
img_scales = [
    (
        640,
        640,
    ),
    (
        320,
        320,
    ),
    (
        960,
        960,
    ),
]
last_stage_out_channels = 768
last_transform = [
    dict(
        bbox_params=dict(
            format='pascal_voc',
            label_fields=[
                'gt_bboxes_labels',
                'gt_ignore_flags',
            ],
            type='BboxParams'),
        keymap=dict(gt_bboxes='bboxes', img='image'),
        transforms=[
            dict(p=0.01, type='Blur'),
            dict(p=0.01, type='MedianBlur'),
            dict(p=0.01, type='ToGray'),
            dict(p=0.01, type='CLAHE'),
        ],
        type='mmdet.Albu'),
    dict(type='YOLOv5HSVRandomAug'),
    dict(prob=0.5, type='mmdet.RandomFlip'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'flip',
            'flip_direction',
        ),
        type='mmdet.PackDetInputs'),
]
launcher = 'pytorch'
load_from = None
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
loss_bbox_weight = 7.5
loss_cls_weight = 0.5
loss_dfl_weight = 0.375
lr_factor = 0.01
max_aspect_ratio = 100
max_epochs = 36
max_keep_ckpts = 2
mixup_prob = 0.1
model = dict(
    backbone=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        arch='P5',
        deepen_factor=0.67,
        last_stage_out_channels=768,
        norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
        type='YOLOv8CSPDarknet',
        widen_factor=0.75),
    bbox_head=dict(
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        head_module=dict(
            act_cfg=dict(inplace=True, type='SiLU'),
            featmap_strides=[
                8,
                16,
                32,
            ],
            in_channels=[
                256,
                512,
                768,
            ],
            norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
            num_classes=4,
            reg_max=16,
            type='YOLOv8HeadModule',
            widen_factor=0.75),
        loss_bbox=dict(
            bbox_format='xyxy',
            iou_mode='ciou',
            loss_weight=7.5,
            reduction='sum',
            return_iou=False,
            type='IoULoss'),
        loss_cls=dict(
            loss_weight=0.5,
            reduction='none',
            type='mmdet.CrossEntropyLoss',
            use_sigmoid=True),
        loss_dfl=dict(
            loss_weight=0.375,
            reduction='mean',
            type='mmdet.DistributionFocalLoss'),
        prior_generator=dict(
            offset=0.5, strides=[
                8,
                16,
                32,
            ], type='mmdet.MlvlPointGenerator'),
        type='YOLOv8Head'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            0.0,
            0.0,
            0.0,
        ],
        std=[
            255.0,
            255.0,
            255.0,
        ],
        type='YOLOv5DetDataPreprocessor'),
    neck=dict(
        act_cfg=dict(inplace=True, type='SiLU'),
        deepen_factor=0.67,
        in_channels=[
            256,
            512,
            768,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.03, type='BN'),
        num_csp_blocks=3,
        out_channels=[
            256,
            512,
            768,
        ],
        type='YOLOv8PAFPN',
        widen_factor=0.75),
    test_cfg=dict(
        max_per_img=300,
        multi_label=True,
        nms=dict(iou_threshold=0.7, type='nms'),
        nms_pre=30000,
        score_thr=0.001),
    train_cfg=dict(
        assigner=dict(
            alpha=0.5,
            beta=6.0,
            eps=1e-09,
            num_classes=4,
            topk=10,
            type='BatchTaskAlignedAssigner',
            use_ciou=True)),
    type='YOLODetector')
model_test_cfg = dict(
    max_per_img=300,
    multi_label=True,
    nms=dict(iou_threshold=0.7, type='nms'),
    nms_pre=30000,
    score_thr=0.001)
mosaic_affine_transform = [
    dict(
        img_scale=(
            640,
            640,
        ),
        pad_val=114.0,
        pre_transform=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
        ],
        type='Mosaic'),
    dict(
        border=(
            -320,
            -320,
        ),
        border_val=(
            114,
            114,
            114,
        ),
        max_aspect_ratio=100,
        max_rotate_degree=0.0,
        max_shear_degree=0.0,
        scaling_ratio_range=(
            0.09999999999999998,
            1.9,
        ),
        type='YOLOv5RandomAffine'),
]
norm_cfg = dict(eps=0.001, momentum=0.03, type='BN')
num_classes = 4
num_det_layers = 3
optim_wrapper = dict(
    clip_grad=dict(max_norm=10.0),
    constructor='YOLOv5OptimizerConstructor',
    optimizer=dict(
        batch_size_per_gpu=10,
        lr=0.01,
        momentum=0.937,
        nesterov=True,
        type='SGD',
        weight_decay=0.0005),
    type='OptimWrapper')
param_scheduler = None
persistent_workers = True
pre_transform = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
]
resume = True
save_epoch_intervals = 1
strides = [
    8,
    16,
    32,
]
tal_alpha = 0.5
tal_beta = 6.0
tal_topk = 10
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        batch_shapes_cfg=None,
        data_prefix=dict(img='val2017/'),
        data_root='/media/iris/새 볼륨/nonslip_patching_paper/coco_format/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
            dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                    'pad_param',
                ),
                type='mmdet.PackDetInputs'),
        ],
        test_mode=True,
        type='YOLOv5CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file=
    '/media/iris/새 볼륨/nonslip_patching_paper/coco_format/annotations/instances_val2017.json',
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='mmdet.CocoMetric')
test_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(scale=(
        640,
        640,
    ), type='YOLOv5KeepRatioResize'),
    dict(
        allow_scale_up=False,
        pad_val=dict(img=114),
        scale=(
            640,
            640,
        ),
        type='LetterResize'),
    dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'scale_factor',
            'pad_param',
        ),
        type='mmdet.PackDetInputs'),
]
train_ann_file = 'annotations/instances_train2017.json'
train_batch_size_per_gpu = 10
train_cfg = dict(
    dynamic_intervals=[
        (
            30,
            1,
        ),
    ],
    max_epochs=36,
    type='EpochBasedTrainLoop',
    val_interval=1)
train_data_prefix = 'train2017/'
train_dataloader = dict(
    batch_size=10,
    collate_fn=dict(type='yolov5_collate'),
    dataset=dict(
        ann_file='annotations/instances_train2017.json',
        data_prefix=dict(img='train2017/'),
        data_root='/media/iris/새 볼륨/nonslip_patching_paper/coco_format/',
        filter_cfg=dict(filter_empty_gt=False, min_size=32),
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                pad_val=114.0,
                pre_transform=[
                    dict(backend_args=None, type='LoadImageFromFile'),
                    dict(type='LoadAnnotations', with_bbox=True),
                ],
                type='Mosaic'),
            dict(
                border=(
                    -320,
                    -320,
                ),
                border_val=(
                    114,
                    114,
                    114,
                ),
                max_aspect_ratio=100,
                max_rotate_degree=0.0,
                max_shear_degree=0.0,
                scaling_ratio_range=(
                    0.09999999999999998,
                    1.9,
                ),
                type='YOLOv5RandomAffine'),
            dict(
                pre_transform=[
                    dict(backend_args=None, type='LoadImageFromFile'),
                    dict(type='LoadAnnotations', with_bbox=True),
                    dict(
                        img_scale=(
                            640,
                            640,
                        ),
                        pad_val=114.0,
                        pre_transform=[
                            dict(backend_args=None, type='LoadImageFromFile'),
                            dict(type='LoadAnnotations', with_bbox=True),
                        ],
                        type='Mosaic'),
                    dict(
                        border=(
                            -320,
                            -320,
                        ),
                        border_val=(
                            114,
                            114,
                            114,
                        ),
                        max_aspect_ratio=100,
                        max_rotate_degree=0.0,
                        max_shear_degree=0.0,
                        scaling_ratio_range=(
                            0.09999999999999998,
                            1.9,
                        ),
                        type='YOLOv5RandomAffine'),
                ],
                prob=0.1,
                type='YOLOv5MixUp'),
            dict(
                bbox_params=dict(
                    format='pascal_voc',
                    label_fields=[
                        'gt_bboxes_labels',
                        'gt_ignore_flags',
                    ],
                    type='BboxParams'),
                keymap=dict(gt_bboxes='bboxes', img='image'),
                transforms=[
                    dict(p=0.01, type='Blur'),
                    dict(p=0.01, type='MedianBlur'),
                    dict(p=0.01, type='ToGray'),
                    dict(p=0.01, type='CLAHE'),
                ],
                type='mmdet.Albu'),
            dict(type='YOLOv5HSVRandomAug'),
            dict(prob=0.5, type='mmdet.RandomFlip'),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'flip',
                    'flip_direction',
                ),
                type='mmdet.PackDetInputs'),
        ],
        type='YOLOv5CocoDataset'),
    num_workers=8,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_num_workers = 8
train_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        img_scale=(
            640,
            640,
        ),
        pad_val=114.0,
        pre_transform=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
        ],
        type='Mosaic'),
    dict(
        border=(
            -320,
            -320,
        ),
        border_val=(
            114,
            114,
            114,
        ),
        max_aspect_ratio=100,
        max_rotate_degree=0.0,
        max_shear_degree=0.0,
        scaling_ratio_range=(
            0.09999999999999998,
            1.9,
        ),
        type='YOLOv5RandomAffine'),
    dict(
        pre_transform=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                img_scale=(
                    640,
                    640,
                ),
                pad_val=114.0,
                pre_transform=[
                    dict(backend_args=None, type='LoadImageFromFile'),
                    dict(type='LoadAnnotations', with_bbox=True),
                ],
                type='Mosaic'),
            dict(
                border=(
                    -320,
                    -320,
                ),
                border_val=(
                    114,
                    114,
                    114,
                ),
                max_aspect_ratio=100,
                max_rotate_degree=0.0,
                max_shear_degree=0.0,
                scaling_ratio_range=(
                    0.09999999999999998,
                    1.9,
                ),
                type='YOLOv5RandomAffine'),
        ],
        prob=0.1,
        type='YOLOv5MixUp'),
    dict(
        bbox_params=dict(
            format='pascal_voc',
            label_fields=[
                'gt_bboxes_labels',
                'gt_ignore_flags',
            ],
            type='BboxParams'),
        keymap=dict(gt_bboxes='bboxes', img='image'),
        transforms=[
            dict(p=0.01, type='Blur'),
            dict(p=0.01, type='MedianBlur'),
            dict(p=0.01, type='ToGray'),
            dict(p=0.01, type='CLAHE'),
        ],
        type='mmdet.Albu'),
    dict(type='YOLOv5HSVRandomAug'),
    dict(prob=0.5, type='mmdet.RandomFlip'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'flip',
            'flip_direction',
        ),
        type='mmdet.PackDetInputs'),
]
train_pipeline_stage2 = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(scale=(
        640,
        640,
    ), type='YOLOv5KeepRatioResize'),
    dict(
        allow_scale_up=True,
        pad_val=dict(img=114.0),
        scale=(
            640,
            640,
        ),
        type='LetterResize'),
    dict(
        border_val=(
            114,
            114,
            114,
        ),
        max_aspect_ratio=100,
        max_rotate_degree=0.0,
        max_shear_degree=0.0,
        scaling_ratio_range=(
            0.09999999999999998,
            1.9,
        ),
        type='YOLOv5RandomAffine'),
    dict(
        bbox_params=dict(
            format='pascal_voc',
            label_fields=[
                'gt_bboxes_labels',
                'gt_ignore_flags',
            ],
            type='BboxParams'),
        keymap=dict(gt_bboxes='bboxes', img='image'),
        transforms=[
            dict(p=0.01, type='Blur'),
            dict(p=0.01, type='MedianBlur'),
            dict(p=0.01, type='ToGray'),
            dict(p=0.01, type='CLAHE'),
        ],
        type='mmdet.Albu'),
    dict(type='YOLOv5HSVRandomAug'),
    dict(prob=0.5, type='mmdet.RandomFlip'),
    dict(
        meta_keys=(
            'img_id',
            'img_path',
            'ori_shape',
            'img_shape',
            'flip',
            'flip_direction',
        ),
        type='mmdet.PackDetInputs'),
]
tta_model = dict(
    tta_cfg=dict(max_per_img=300, nms=dict(iou_threshold=0.65, type='nms')),
    type='mmdet.DetTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(
                    transforms=[
                        dict(scale=(
                            640,
                            640,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                640,
                                640,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
                dict(
                    transforms=[
                        dict(scale=(
                            320,
                            320,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                320,
                                320,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
                dict(
                    transforms=[
                        dict(scale=(
                            960,
                            960,
                        ), type='YOLOv5KeepRatioResize'),
                        dict(
                            allow_scale_up=False,
                            pad_val=dict(img=114),
                            scale=(
                                960,
                                960,
                            ),
                            type='LetterResize'),
                    ],
                    type='Compose'),
            ],
            [
                dict(prob=1.0, type='mmdet.RandomFlip'),
                dict(prob=0.0, type='mmdet.RandomFlip'),
            ],
            [
                dict(type='mmdet.LoadAnnotations', with_bbox=True),
            ],
            [
                dict(
                    meta_keys=(
                        'img_id',
                        'img_path',
                        'ori_shape',
                        'img_shape',
                        'scale_factor',
                        'pad_param',
                        'flip',
                        'flip_direction',
                    ),
                    type='mmdet.PackDetInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_ann_file = 'annotations/instances_val2017.json'
val_batch_size_per_gpu = 1
val_cfg = dict(type='ValLoop')
val_data_prefix = 'val2017/'
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='annotations/instances_val2017.json',
        batch_shapes_cfg=None,
        data_prefix=dict(img='val2017/'),
        data_root='/media/iris/새 볼륨/nonslip_patching_paper/coco_format/',
        pipeline=[
            dict(backend_args=None, type='LoadImageFromFile'),
            dict(scale=(
                640,
                640,
            ), type='YOLOv5KeepRatioResize'),
            dict(
                allow_scale_up=False,
                pad_val=dict(img=114),
                scale=(
                    640,
                    640,
                ),
                type='LetterResize'),
            dict(_scope_='mmdet', type='LoadAnnotations', with_bbox=True),
            dict(
                meta_keys=(
                    'img_id',
                    'img_path',
                    'ori_shape',
                    'img_shape',
                    'scale_factor',
                    'pad_param',
                ),
                type='mmdet.PackDetInputs'),
        ],
        test_mode=True,
        type='YOLOv5CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file=
    '/media/iris/새 볼륨/nonslip_patching_paper/coco_format/annotations/instances_val2017.json',
    metric='bbox',
    proposal_nums=(
        100,
        1,
        10,
    ),
    type='mmdet.CocoMetric')
val_interval_stage2 = 1
val_num_workers = 2
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='mmdet.DetLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
weight_decay = 0.0005
widen_factor = 0.75
work_dir = 'yolov8_m_syncbn_fast_8xb16-500e_coco'

2024/05/21 09:54:21 - mmengine - INFO - Using SyncBatchNorm()
2024/05/21 09:54:21 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(9           ) YOLOv5ParamSchedulerHook           
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(9           ) YOLOv5ParamSchedulerHook           
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/05/21 09:54:25 - mmengine - INFO - Scaled weight_decay to 0.00046875
2024/05/21 09:54:25 - mmengine - INFO - Optimizer groups: 83 .bias, 83 conv.weight, 77 other
Name of parameter - Initialization information

backbone.stem.conv.weight - torch.Size([48, 3, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stem.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stem.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.0.conv.weight - torch.Size([96, 48, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.main_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.final_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv2.conv.weight - torch.Size([48, 48, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.blocks.0.conv2.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.0.conv2.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.1.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.blocks.1.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.1.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.1.conv2.conv.weight - torch.Size([48, 48, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage1.1.blocks.1.conv2.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage1.1.blocks.1.conv2.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.0.conv.weight - torch.Size([192, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.main_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.final_conv.conv.weight - torch.Size([192, 576, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv2.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.0.conv2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.0.conv2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.1.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv2.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.1.conv2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.1.conv2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.2.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.2.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.2.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.2.conv2.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.2.conv2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.2.conv2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.3.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.3.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.3.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.3.conv2.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage2.1.blocks.3.conv2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage2.1.blocks.3.conv2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.0.conv.weight - torch.Size([384, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.main_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.main_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.main_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.final_conv.conv.weight - torch.Size([384, 1152, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv2.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.0.conv2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.0.conv2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.1.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv2.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.1.conv2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.1.conv2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.2.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.2.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.2.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.2.conv2.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.2.conv2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.2.conv2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.3.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.3.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.3.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.3.conv2.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage3.1.blocks.3.conv2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage3.1.blocks.3.conv2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.0.conv.weight - torch.Size([576, 384, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.main_conv.conv.weight - torch.Size([576, 576, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.main_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.main_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.final_conv.conv.weight - torch.Size([576, 1152, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.final_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.final_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv1.conv.weight - torch.Size([288, 288, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.blocks.0.conv1.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv1.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv2.conv.weight - torch.Size([288, 288, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.blocks.0.conv2.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.0.conv2.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.1.conv1.conv.weight - torch.Size([288, 288, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.blocks.1.conv1.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.1.conv1.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.1.conv2.conv.weight - torch.Size([288, 288, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.1.blocks.1.conv2.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.1.blocks.1.conv2.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv1.conv.weight - torch.Size([288, 576, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.2.conv1.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv1.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv2.conv.weight - torch.Size([576, 1152, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8CSPDarknet  

backbone.stage4.2.conv2.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

backbone.stage4.2.conv2.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.main_conv.conv.weight - torch.Size([384, 960, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.main_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.main_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.final_conv.conv.weight - torch.Size([384, 768, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.blocks.0.conv2.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.blocks.0.conv2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.blocks.0.conv2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.blocks.1.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.blocks.1.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.blocks.1.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.blocks.1.conv2.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.0.blocks.1.conv2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.0.blocks.1.conv2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.main_conv.conv.weight - torch.Size([192, 576, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.final_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.0.conv2.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.blocks.0.conv2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.0.conv2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.1.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.blocks.1.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.1.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.1.conv2.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.top_down_layers.1.blocks.1.conv2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.top_down_layers.1.blocks.1.conv2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.0.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.downsample_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.1.conv.weight - torch.Size([384, 384, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.downsample_layers.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.downsample_layers.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.main_conv.conv.weight - torch.Size([384, 576, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.main_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.main_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.final_conv.conv.weight - torch.Size([384, 768, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.0.conv2.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.blocks.0.conv2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.0.conv2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.1.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.blocks.1.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.1.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.1.conv2.conv.weight - torch.Size([192, 192, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.0.blocks.1.conv2.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.0.blocks.1.conv2.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.main_conv.conv.weight - torch.Size([576, 960, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.main_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.main_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.final_conv.conv.weight - torch.Size([576, 1152, 1, 1]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.final_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.final_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.0.conv1.conv.weight - torch.Size([288, 288, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.blocks.0.conv1.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.0.conv1.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.0.conv2.conv.weight - torch.Size([288, 288, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.blocks.0.conv2.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.0.conv2.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.1.conv1.conv.weight - torch.Size([288, 288, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.blocks.1.conv1.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.1.conv1.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.1.conv2.conv.weight - torch.Size([288, 288, 3, 3]): 
Initialized by user-defined `init_weights` in YOLOv8PAFPN  

neck.bottom_up_layers.1.blocks.1.conv2.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

neck.bottom_up_layers.1.blocks.1.conv2.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.0.conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.1.conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.2.weight - torch.Size([4, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.0.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  

bbox_head.head_module.cls_preds.1.0.conv.weight - torch.Size([192, 384, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.1.conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.2.weight - torch.Size([4, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.1.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  

bbox_head.head_module.cls_preds.2.0.conv.weight - torch.Size([192, 576, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.1.conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.2.weight - torch.Size([4, 192, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.cls_preds.2.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  

bbox_head.head_module.reg_preds.0.0.conv.weight - torch.Size([64, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.1.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.0.2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  

bbox_head.head_module.reg_preds.1.0.conv.weight - torch.Size([64, 384, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.1.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.1.2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  

bbox_head.head_module.reg_preds.2.0.conv.weight - torch.Size([64, 576, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.1.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.1.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.1.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of YOLODetector  

bbox_head.head_module.reg_preds.2.2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in YOLOv8HeadModule  
2024/05/21 09:54:26 - mmengine - INFO - Auto resumed from the latest checkpoint /media/iris/Dong/openmmlab/detection/coding/yolov8/yolov8_m_syncbn_fast_8xb16-500e_coco/epoch_25.pth.
2024/05/21 09:54:36 - mmengine - INFO - Load checkpoint from /media/iris/Dong/openmmlab/detection/coding/yolov8/yolov8_m_syncbn_fast_8xb16-500e_coco/epoch_25.pth
2024/05/21 09:54:36 - mmengine - WARNING - `resume_param_scheduler` is True but `self.param_schedulers` is None, so skip resuming parameter schedulers
2024/05/21 09:54:36 - mmengine - INFO - resumed epoch: 25, iter: 5525
2024/05/21 09:54:36 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/05/21 09:54:36 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/05/21 09:54:36 - mmengine - INFO - Checkpoints will be saved to /media/iris/Dong/openmmlab/detection/coding/yolov8/yolov8_m_syncbn_fast_8xb16-500e_coco.
2024/05/21 10:17:11 - mmengine - INFO - Epoch(train) [26][ 50/221]  base_lr: 1.0000e-02 lr: 3.4000e-03  eta: 17:54:53  time: 27.0867  data_time: 12.7031  memory: 8184  grad_norm: 53.6433  loss: 66.1856  loss_cls: 24.5055  loss_bbox: 15.9876  loss_dfl: 25.6925
2024/05/21 10:36:09 - mmengine - INFO - Epoch(train) [26][100/221]  base_lr: 1.0000e-02 lr: 3.4000e-03  eta: 16:08:22  time: 22.7656  data_time: 3.8473  memory: 6863  grad_norm: 53.9910  loss: 64.6193  loss_cls: 23.6434  loss_bbox: 15.4991  loss_dfl: 25.4768
2024/05/21 10:52:02 - mmengine - INFO - Epoch(train) [26][150/221]  base_lr: 1.0000e-02 lr: 3.4000e-03  eta: 14:33:11  time: 19.0533  data_time: 4.2580  memory: 6863  grad_norm: 52.7804  loss: 64.8877  loss_cls: 23.2139  loss_bbox: 16.1208  loss_dfl: 25.5530
2024/05/21 11:08:07 - mmengine - INFO - Epoch(train) [26][200/221]  base_lr: 1.0000e-02 lr: 3.4000e-03  eta: 13:39:55  time: 19.2972  data_time: 7.8651  memory: 6855  grad_norm: 54.6625  loss: 68.1672  loss_cls: 24.5648  loss_bbox: 16.9270  loss_dfl: 26.6755
2024/05/21 11:12:16 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 11:12:16 - mmengine - INFO - Saving checkpoint at 26 epochs
2024/05/21 11:12:17 - mmengine - WARNING - `save_param_scheduler` is True but `self.param_schedulers` is None, so skip saving parameter schedulers
2024/05/21 11:12:37 - mmengine - INFO - Epoch(val) [26][ 50/552]    eta: 0:03:01  time: 0.3608  data_time: 0.3439  memory: 7865  
2024/05/21 11:12:55 - mmengine - INFO - Epoch(val) [26][100/552]    eta: 0:02:46  time: 0.3763  data_time: 0.3641  memory: 593  
2024/05/21 11:13:18 - mmengine - INFO - Epoch(val) [26][150/552]    eta: 0:02:39  time: 0.4502  data_time: 0.4387  memory: 593  
2024/05/21 11:13:38 - mmengine - INFO - Epoch(val) [26][200/552]    eta: 0:02:19  time: 0.4031  data_time: 0.3915  memory: 593  
2024/05/21 11:13:57 - mmengine - INFO - Epoch(val) [26][250/552]    eta: 0:01:58  time: 0.3796  data_time: 0.3684  memory: 593  
2024/05/21 11:14:17 - mmengine - INFO - Epoch(val) [26][300/552]    eta: 0:01:39  time: 0.3985  data_time: 0.3869  memory: 593  
2024/05/21 11:14:40 - mmengine - INFO - Epoch(val) [26][350/552]    eta: 0:01:21  time: 0.4553  data_time: 0.4434  memory: 593  
2024/05/21 11:15:03 - mmengine - INFO - Epoch(val) [26][400/552]    eta: 0:01:02  time: 0.4552  data_time: 0.4434  memory: 593  
2024/05/21 11:15:24 - mmengine - INFO - Epoch(val) [26][450/552]    eta: 0:00:42  time: 0.4356  data_time: 0.4239  memory: 593  
2024/05/21 11:15:47 - mmengine - INFO - Epoch(val) [26][500/552]    eta: 0:00:21  time: 0.4455  data_time: 0.4336  memory: 593  
2024/05/21 11:16:11 - mmengine - INFO - Epoch(val) [26][550/552]    eta: 0:00:00  time: 0.4852  data_time: 0.4733  memory: 593  
2024/05/21 11:16:20 - mmengine - INFO - Evaluating bbox...
2024/05/21 11:16:21 - mmengine - INFO - bbox_mAP_copypaste: 0.595 0.714 0.651 -1.000 -1.000 0.595
2024/05/21 11:16:22 - mmengine - INFO - Epoch(val) [26][552/552]    coco/bbox_mAP: 0.5950  coco/bbox_mAP_50: 0.7140  coco/bbox_mAP_75: 0.6510  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.5950  data_time: 0.4091  time: 0.4212
2024/05/21 11:35:30 - mmengine - INFO - Epoch(train) [27][ 50/221]  base_lr: 1.0000e-02 lr: 3.1250e-03  eta: 12:51:35  time: 22.9792  data_time: 16.6388  memory: 6872  grad_norm: 53.6368  loss: 65.1998  loss_cls: 23.6453  loss_bbox: 15.8091  loss_dfl: 25.7454
2024/05/21 11:50:12 - mmengine - INFO - Epoch(train) [27][100/221]  base_lr: 1.0000e-02 lr: 3.1250e-03  eta: 12:12:56  time: 17.6382  data_time: 14.3536  memory: 6864  grad_norm: 55.4632  loss: 66.1190  loss_cls: 24.1447  loss_bbox: 15.9647  loss_dfl: 26.0095
2024/05/21 12:05:08 - mmengine - INFO - Epoch(train) [27][150/221]  base_lr: 1.0000e-02 lr: 3.1250e-03  eta: 11:41:59  time: 17.9070  data_time: 12.7365  memory: 6864  grad_norm: 55.8907  loss: 64.7531  loss_cls: 23.5163  loss_bbox: 15.6526  loss_dfl: 25.5842
2024/05/21 12:22:39 - mmengine - INFO - Epoch(train) [27][200/221]  base_lr: 1.0000e-02 lr: 3.1250e-03  eta: 11:27:17  time: 21.0343  data_time: 9.5923  memory: 6855  grad_norm: 54.6906  loss: 63.3668  loss_cls: 22.4312  loss_bbox: 15.6123  loss_dfl: 25.3233
2024/05/21 12:26:32 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 12:26:32 - mmengine - INFO - Saving checkpoint at 27 epochs
2024/05/21 12:26:53 - mmengine - INFO - Epoch(val) [27][ 50/552]    eta: 0:03:06  time: 0.3721  data_time: 0.3595  memory: 6872  
2024/05/21 12:27:12 - mmengine - INFO - Epoch(val) [27][100/552]    eta: 0:02:49  time: 0.3758  data_time: 0.3634  memory: 593  
2024/05/21 12:27:35 - mmengine - INFO - Epoch(val) [27][150/552]    eta: 0:02:42  time: 0.4650  data_time: 0.4537  memory: 593  
2024/05/21 12:27:54 - mmengine - INFO - Epoch(val) [27][200/552]    eta: 0:02:19  time: 0.3765  data_time: 0.3648  memory: 593  
2024/05/21 12:28:14 - mmengine - INFO - Epoch(val) [27][250/552]    eta: 0:01:59  time: 0.3970  data_time: 0.3858  memory: 593  
2024/05/21 12:28:34 - mmengine - INFO - Epoch(val) [27][300/552]    eta: 0:01:40  time: 0.4132  data_time: 0.4013  memory: 593  
2024/05/21 12:28:58 - mmengine - INFO - Epoch(val) [27][350/552]    eta: 0:01:22  time: 0.4705  data_time: 0.4584  memory: 593  
2024/05/21 12:29:20 - mmengine - INFO - Epoch(val) [27][400/552]    eta: 0:01:02  time: 0.4435  data_time: 0.4318  memory: 593  
2024/05/21 12:29:43 - mmengine - INFO - Epoch(val) [27][450/552]    eta: 0:00:42  time: 0.4498  data_time: 0.4381  memory: 593  
2024/05/21 12:30:04 - mmengine - INFO - Epoch(val) [27][500/552]    eta: 0:00:21  time: 0.4313  data_time: 0.4190  memory: 593  
2024/05/21 12:30:29 - mmengine - INFO - Epoch(val) [27][550/552]    eta: 0:00:00  time: 0.4944  data_time: 0.4828  memory: 593  
2024/05/21 12:30:36 - mmengine - INFO - Evaluating bbox...
2024/05/21 12:30:37 - mmengine - INFO - bbox_mAP_copypaste: 0.620 0.737 0.680 -1.000 -1.000 0.620
2024/05/21 12:30:38 - mmengine - INFO - Epoch(val) [27][552/552]    coco/bbox_mAP: 0.6200  coco/bbox_mAP_50: 0.7370  coco/bbox_mAP_75: 0.6800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.6200  data_time: 0.4132  time: 0.4251
2024/05/21 12:30:38 - mmengine - INFO - The previous best checkpoint /media/iris/Dong/openmmlab/detection/coding/yolov8/yolov8_m_syncbn_fast_8xb16-500e_coco/best_coco_bbox_mAP_epoch_25.pth is removed
2024/05/21 12:30:40 - mmengine - INFO - The best checkpoint with 0.6200 coco/bbox_mAP at 27 epoch is saved to best_coco_bbox_mAP_epoch_27.pth.
2024/05/21 12:43:59 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 12:49:26 - mmengine - INFO - Epoch(train) [28][ 50/221]  base_lr: 1.0000e-02 lr: 2.8500e-03  eta: 10:56:23  time: 22.4754  data_time: 20.2479  memory: 6855  grad_norm: 53.1921  loss: 64.3394  loss_cls: 23.0918  loss_bbox: 15.5430  loss_dfl: 25.7046
2024/05/21 13:04:07 - mmengine - INFO - Epoch(train) [28][100/221]  base_lr: 1.0000e-02 lr: 2.8500e-03  eta: 10:31:37  time: 17.6118  data_time: 12.9614  memory: 6864  grad_norm: 53.5407  loss: 65.0108  loss_cls: 23.3615  loss_bbox: 15.6959  loss_dfl: 25.9533
2024/05/21 13:18:51 - mmengine - INFO - Epoch(train) [28][150/221]  base_lr: 1.0000e-02 lr: 2.8500e-03  eta: 10:08:44  time: 17.6782  data_time: 14.5650  memory: 6864  grad_norm: 54.7581  loss: 65.1569  loss_cls: 23.0979  loss_bbox: 15.9885  loss_dfl: 26.0704
2024/05/21 13:34:32 - mmengine - INFO - Epoch(train) [28][200/221]  base_lr: 1.0000e-02 lr: 2.8500e-03  eta: 9:49:48  time: 18.8363  data_time: 18.5746  memory: 6880  grad_norm: 54.9844  loss: 61.7833  loss_cls: 21.7360  loss_bbox: 14.9303  loss_dfl: 25.1170
2024/05/21 13:38:39 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 13:38:39 - mmengine - INFO - Saving checkpoint at 28 epochs
2024/05/21 13:39:03 - mmengine - INFO - Epoch(val) [28][ 50/552]    eta: 0:03:20  time: 0.3988  data_time: 0.3869  memory: 6855  
2024/05/21 13:39:22 - mmengine - INFO - Epoch(val) [28][100/552]    eta: 0:02:52  time: 0.3659  data_time: 0.3541  memory: 593  
2024/05/21 13:39:44 - mmengine - INFO - Epoch(val) [28][150/552]    eta: 0:02:41  time: 0.4431  data_time: 0.4316  memory: 593  
2024/05/21 13:40:04 - mmengine - INFO - Epoch(val) [28][200/552]    eta: 0:02:22  time: 0.4118  data_time: 0.4001  memory: 593  
2024/05/21 13:40:23 - mmengine - INFO - Epoch(val) [28][250/552]    eta: 0:01:59  time: 0.3612  data_time: 0.3495  memory: 593  
2024/05/21 13:40:44 - mmengine - INFO - Epoch(val) [28][300/552]    eta: 0:01:41  time: 0.4296  data_time: 0.4184  memory: 593  
2024/05/21 13:41:07 - mmengine - INFO - Epoch(val) [28][350/552]    eta: 0:01:22  time: 0.4626  data_time: 0.4512  memory: 593  
2024/05/21 13:41:30 - mmengine - INFO - Epoch(val) [28][400/552]    eta: 0:01:03  time: 0.4631  data_time: 0.4514  memory: 593  
2024/05/21 13:41:51 - mmengine - INFO - Epoch(val) [28][450/552]    eta: 0:00:42  time: 0.4202  data_time: 0.4083  memory: 593  
2024/05/21 13:42:12 - mmengine - INFO - Epoch(val) [28][500/552]    eta: 0:00:21  time: 0.4181  data_time: 0.4062  memory: 593  
2024/05/21 13:42:38 - mmengine - INFO - Epoch(val) [28][550/552]    eta: 0:00:00  time: 0.5214  data_time: 0.5097  memory: 593  
2024/05/21 13:42:48 - mmengine - INFO - Evaluating bbox...
2024/05/21 13:42:50 - mmengine - INFO - bbox_mAP_copypaste: 0.601 0.717 0.654 -1.000 -1.000 0.601
2024/05/21 13:42:50 - mmengine - INFO - Epoch(val) [28][552/552]    coco/bbox_mAP: 0.6010  coco/bbox_mAP_50: 0.7170  coco/bbox_mAP_75: 0.6540  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.6010  data_time: 0.4147  time: 0.4264
2024/05/21 14:01:23 - mmengine - INFO - Epoch(train) [29][ 50/221]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 9:24:37  time: 22.2693  data_time: 16.6204  memory: 6872  grad_norm: 56.0251  loss: 63.1959  loss_cls: 23.1604  loss_bbox: 15.1833  loss_dfl: 24.8522
2024/05/21 14:16:59 - mmengine - INFO - Epoch(train) [29][100/221]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 9:06:21  time: 18.7096  data_time: 17.9114  memory: 6880  grad_norm: 55.7213  loss: 65.6710  loss_cls: 24.0295  loss_bbox: 15.9249  loss_dfl: 25.7166
2024/05/21 14:32:12 - mmengine - INFO - Epoch(train) [29][150/221]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 8:47:41  time: 18.2730  data_time: 14.5713  memory: 6880  grad_norm: 54.1080  loss: 64.6362  loss_cls: 23.1160  loss_bbox: 15.7210  loss_dfl: 25.7991
2024/05/21 14:46:48 - mmengine - INFO - Epoch(train) [29][200/221]  base_lr: 1.0000e-02 lr: 2.5750e-03  eta: 8:28:16  time: 17.5120  data_time: 4.8918  memory: 6880  grad_norm: 54.9804  loss: 61.5811  loss_cls: 21.7148  loss_bbox: 15.0268  loss_dfl: 24.8395
2024/05/21 14:51:11 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 14:51:11 - mmengine - INFO - Saving checkpoint at 29 epochs
2024/05/21 14:51:34 - mmengine - INFO - Epoch(val) [29][ 50/552]    eta: 0:03:15  time: 0.3894  data_time: 0.3777  memory: 6855  
2024/05/21 14:51:54 - mmengine - INFO - Epoch(val) [29][100/552]    eta: 0:02:56  time: 0.3919  data_time: 0.3803  memory: 593  
2024/05/21 14:52:15 - mmengine - INFO - Epoch(val) [29][150/552]    eta: 0:02:40  time: 0.4189  data_time: 0.4071  memory: 593  
2024/05/21 14:52:35 - mmengine - INFO - Epoch(val) [29][200/552]    eta: 0:02:22  time: 0.4149  data_time: 0.4036  memory: 593  
2024/05/21 14:52:53 - mmengine - INFO - Epoch(val) [29][250/552]    eta: 0:01:58  time: 0.3499  data_time: 0.3385  memory: 593  
2024/05/21 14:53:14 - mmengine - INFO - Epoch(val) [29][300/552]    eta: 0:01:40  time: 0.4204  data_time: 0.4085  memory: 593  
2024/05/21 14:53:37 - mmengine - INFO - Epoch(val) [29][350/552]    eta: 0:01:22  time: 0.4585  data_time: 0.4464  memory: 593  
2024/05/21 14:54:01 - mmengine - INFO - Epoch(val) [29][400/552]    eta: 0:01:03  time: 0.4795  data_time: 0.4679  memory: 593  
2024/05/21 14:54:23 - mmengine - INFO - Epoch(val) [29][450/552]    eta: 0:00:42  time: 0.4512  data_time: 0.4390  memory: 593  
2024/05/21 14:54:45 - mmengine - INFO - Epoch(val) [29][500/552]    eta: 0:00:21  time: 0.4355  data_time: 0.4231  memory: 593  
2024/05/21 14:55:10 - mmengine - INFO - Epoch(val) [29][550/552]    eta: 0:00:00  time: 0.5022  data_time: 0.4903  memory: 593  
2024/05/21 14:55:17 - mmengine - INFO - Evaluating bbox...
2024/05/21 14:55:18 - mmengine - INFO - bbox_mAP_copypaste: 0.623 0.737 0.680 -1.000 -1.000 0.623
2024/05/21 14:55:19 - mmengine - INFO - Epoch(val) [29][552/552]    coco/bbox_mAP: 0.6230  coco/bbox_mAP_50: 0.7370  coco/bbox_mAP_75: 0.6800  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.6230  data_time: 0.4164  time: 0.4282
2024/05/21 14:55:19 - mmengine - INFO - The previous best checkpoint /media/iris/Dong/openmmlab/detection/coding/yolov8/yolov8_m_syncbn_fast_8xb16-500e_coco/best_coco_bbox_mAP_epoch_27.pth is removed
2024/05/21 14:55:20 - mmengine - INFO - The best checkpoint with 0.6230 coco/bbox_mAP at 29 epoch is saved to best_coco_bbox_mAP_epoch_29.pth.
2024/05/21 15:12:54 - mmengine - INFO - Epoch(train) [30][ 50/221]  base_lr: 1.0000e-02 lr: 2.3000e-03  eta: 8:03:27  time: 21.0184  data_time: 16.8844  memory: 6864  grad_norm: 56.2743  loss: 62.1041  loss_cls: 22.1208  loss_bbox: 15.0275  loss_dfl: 24.9557
2024/05/21 15:27:36 - mmengine - INFO - Epoch(train) [30][100/221]  base_lr: 1.0000e-02 lr: 2.3000e-03  eta: 7:45:11  time: 17.6381  data_time: 7.7146  memory: 6864  grad_norm: 56.3474  loss: 61.9724  loss_cls: 21.5179  loss_bbox: 15.1704  loss_dfl: 25.2840
2024/05/21 15:43:33 - mmengine - INFO - Epoch(train) [30][150/221]  base_lr: 1.0000e-02 lr: 2.3000e-03  eta: 7:28:56  time: 19.1391  data_time: 2.8643  memory: 6864  grad_norm: 56.1306  loss: 61.9366  loss_cls: 21.3828  loss_bbox: 15.4545  loss_dfl: 25.0993
2024/05/21 15:57:55 - mmengine - INFO - Epoch(train) [30][200/221]  base_lr: 1.0000e-02 lr: 2.3000e-03  eta: 7:10:46  time: 17.2461  data_time: 0.9282  memory: 6855  grad_norm: 57.8329  loss: 62.3584  loss_cls: 22.1867  loss_bbox: 14.9843  loss_dfl: 25.1874
2024/05/21 16:02:23 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 16:02:23 - mmengine - INFO - Saving checkpoint at 30 epochs
2024/05/21 16:02:45 - mmengine - INFO - Epoch(val) [30][ 50/552]    eta: 0:03:08  time: 0.3750  data_time: 0.3631  memory: 6864  
2024/05/21 16:03:04 - mmengine - INFO - Epoch(val) [30][100/552]    eta: 0:02:49  time: 0.3759  data_time: 0.3638  memory: 593  
2024/05/21 16:03:27 - mmengine - INFO - Epoch(val) [30][150/552]    eta: 0:02:41  time: 0.4531  data_time: 0.4413  memory: 593  
2024/05/21 16:03:46 - mmengine - INFO - Epoch(val) [30][200/552]    eta: 0:02:20  time: 0.3974  data_time: 0.3854  memory: 593  
2024/05/21 16:04:06 - mmengine - INFO - Epoch(val) [30][250/552]    eta: 0:02:00  time: 0.3951  data_time: 0.3837  memory: 593  
2024/05/21 16:04:27 - mmengine - INFO - Epoch(val) [30][300/552]    eta: 0:01:41  time: 0.4235  data_time: 0.4114  memory: 593  
2024/05/21 16:04:51 - mmengine - INFO - Epoch(val) [30][350/552]    eta: 0:01:23  time: 0.4694  data_time: 0.4569  memory: 593  
2024/05/21 16:05:14 - mmengine - INFO - Epoch(val) [30][400/552]    eta: 0:01:03  time: 0.4557  data_time: 0.4441  memory: 593  
2024/05/21 16:05:34 - mmengine - INFO - Epoch(val) [30][450/552]    eta: 0:00:42  time: 0.4038  data_time: 0.3921  memory: 593  
2024/05/21 16:05:56 - mmengine - INFO - Epoch(val) [30][500/552]    eta: 0:00:21  time: 0.4498  data_time: 0.4377  memory: 593  
2024/05/21 16:06:20 - mmengine - INFO - Epoch(val) [30][550/552]    eta: 0:00:00  time: 0.4813  data_time: 0.4695  memory: 593  
2024/05/21 16:06:29 - mmengine - INFO - Evaluating bbox...
2024/05/21 16:06:30 - mmengine - INFO - bbox_mAP_copypaste: 0.628 0.741 0.678 -1.000 -1.000 0.628
2024/05/21 16:06:30 - mmengine - INFO - Epoch(val) [30][552/552]    coco/bbox_mAP: 0.6280  coco/bbox_mAP_50: 0.7410  coco/bbox_mAP_75: 0.6780  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.6280  data_time: 0.4129  time: 0.4248
2024/05/21 16:06:30 - mmengine - INFO - The previous best checkpoint /media/iris/Dong/openmmlab/detection/coding/yolov8/yolov8_m_syncbn_fast_8xb16-500e_coco/best_coco_bbox_mAP_epoch_29.pth is removed
2024/05/21 16:06:32 - mmengine - INFO - The best checkpoint with 0.6280 coco/bbox_mAP at 30 epoch is saved to best_coco_bbox_mAP_epoch_30.pth.
2024/05/21 16:06:35 - mmengine - INFO - Switch pipeline now!
2024/05/21 16:11:11 - mmengine - INFO - Epoch(train) [31][ 50/221]  base_lr: 1.0000e-02 lr: 2.0250e-03  eta: 6:32:59  time: 5.5313  data_time: 4.7180  memory: 6816  grad_norm: 94.9649  loss: 55.7168  loss_cls: 19.4332  loss_bbox: 12.9164  loss_dfl: 23.3671
2024/05/21 16:15:30 - mmengine - INFO - Epoch(train) [31][100/221]  base_lr: 1.0000e-02 lr: 2.0250e-03  eta: 6:06:19  time: 5.1852  data_time: 3.0491  memory: 6807  grad_norm: 94.2451  loss: 58.9391  loss_cls: 19.8231  loss_bbox: 14.5593  loss_dfl: 24.5566
2024/05/21 16:20:30 - mmengine - INFO - Epoch(train) [31][150/221]  base_lr: 1.0000e-02 lr: 2.0250e-03  eta: 5:42:04  time: 5.9970  data_time: 0.0302  memory: 6804  grad_norm: 88.8007  loss: 57.4457  loss_cls: 19.0067  loss_bbox: 14.1453  loss_dfl: 24.2937
2024/05/21 16:25:21 - mmengine - INFO - Epoch(train) [31][200/221]  base_lr: 1.0000e-02 lr: 2.0250e-03  eta: 5:19:09  time: 5.8143  data_time: 0.1315  memory: 6804  grad_norm: 90.0378  loss: 54.6609  loss_cls: 18.4423  loss_bbox: 13.0332  loss_dfl: 23.1855
2024/05/21 16:26:26 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 16:26:26 - mmengine - INFO - Saving checkpoint at 31 epochs
2024/05/21 16:26:48 - mmengine - INFO - Epoch(val) [31][ 50/552]    eta: 0:03:08  time: 0.3764  data_time: 0.3650  memory: 6804  
2024/05/21 16:27:07 - mmengine - INFO - Epoch(val) [31][100/552]    eta: 0:02:53  time: 0.3907  data_time: 0.3788  memory: 593  
2024/05/21 16:27:29 - mmengine - INFO - Epoch(val) [31][150/552]    eta: 0:02:41  time: 0.4409  data_time: 0.4286  memory: 593  
2024/05/21 16:27:50 - mmengine - INFO - Epoch(val) [31][200/552]    eta: 0:02:22  time: 0.4150  data_time: 0.4031  memory: 593  
2024/05/21 16:28:08 - mmengine - INFO - Epoch(val) [31][250/552]    eta: 0:02:00  time: 0.3659  data_time: 0.3538  memory: 593  
2024/05/21 16:28:28 - mmengine - INFO - Epoch(val) [31][300/552]    eta: 0:01:40  time: 0.3996  data_time: 0.3875  memory: 593  
2024/05/21 16:28:52 - mmengine - INFO - Epoch(val) [31][350/552]    eta: 0:01:22  time: 0.4719  data_time: 0.4602  memory: 593  
2024/05/21 16:29:15 - mmengine - INFO - Epoch(val) [31][400/552]    eta: 0:01:03  time: 0.4602  data_time: 0.4486  memory: 593  
2024/05/21 16:29:37 - mmengine - INFO - Epoch(val) [31][450/552]    eta: 0:00:42  time: 0.4450  data_time: 0.4336  memory: 593  
2024/05/21 16:29:58 - mmengine - INFO - Epoch(val) [31][500/552]    eta: 0:00:21  time: 0.4100  data_time: 0.3981  memory: 593  
2024/05/21 16:30:23 - mmengine - INFO - Epoch(val) [31][550/552]    eta: 0:00:00  time: 0.5095  data_time: 0.4975  memory: 593  
2024/05/21 16:30:32 - mmengine - INFO - Evaluating bbox...
2024/05/21 16:30:33 - mmengine - INFO - bbox_mAP_copypaste: 0.636 0.754 0.691 -1.000 -1.000 0.636
2024/05/21 16:30:33 - mmengine - INFO - Epoch(val) [31][552/552]    coco/bbox_mAP: 0.6360  coco/bbox_mAP_50: 0.7540  coco/bbox_mAP_75: 0.6910  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.6360  data_time: 0.4136  time: 0.4254
2024/05/21 16:30:34 - mmengine - INFO - The previous best checkpoint /media/iris/Dong/openmmlab/detection/coding/yolov8/yolov8_m_syncbn_fast_8xb16-500e_coco/best_coco_bbox_mAP_epoch_30.pth is removed
2024/05/21 16:30:35 - mmengine - INFO - The best checkpoint with 0.6360 coco/bbox_mAP at 31 epoch is saved to best_coco_bbox_mAP_epoch_31.pth.
2024/05/21 16:36:01 - mmengine - INFO - Epoch(train) [32][ 50/221]  base_lr: 1.0000e-02 lr: 1.7500e-03  eta: 4:48:34  time: 6.4681  data_time: 6.1481  memory: 6804  grad_norm: 86.1199  loss: 53.9215  loss_cls: 17.1346  loss_bbox: 13.3241  loss_dfl: 23.4628
2024/05/21 16:40:29 - mmengine - INFO - Epoch(train) [32][100/221]  base_lr: 1.0000e-02 lr: 1.7500e-03  eta: 4:28:23  time: 5.3512  data_time: 4.4058  memory: 6804  grad_norm: 86.6988  loss: 52.2693  loss_cls: 17.0959  loss_bbox: 12.2661  loss_dfl: 22.9073
2024/05/21 16:45:07 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 16:45:10 - mmengine - INFO - Epoch(train) [32][150/221]  base_lr: 1.0000e-02 lr: 1.7500e-03  eta: 4:09:26  time: 5.6305  data_time: 2.1203  memory: 6816  grad_norm: 89.2889  loss: 54.8643  loss_cls: 17.8030  loss_bbox: 13.2281  loss_dfl: 23.8331
2024/05/21 16:49:43 - mmengine - INFO - Epoch(train) [32][200/221]  base_lr: 1.0000e-02 lr: 1.7500e-03  eta: 3:51:20  time: 5.4597  data_time: 0.0664  memory: 6804  grad_norm: 89.7141  loss: 52.2554  loss_cls: 16.3460  loss_bbox: 12.6043  loss_dfl: 23.3050
2024/05/21 16:51:07 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 16:51:07 - mmengine - INFO - Saving checkpoint at 32 epochs
2024/05/21 16:51:28 - mmengine - INFO - Epoch(val) [32][ 50/552]    eta: 0:03:05  time: 0.3687  data_time: 0.3564  memory: 6807  
2024/05/21 16:51:46 - mmengine - INFO - Epoch(val) [32][100/552]    eta: 0:02:46  time: 0.3668  data_time: 0.3549  memory: 593  
2024/05/21 16:52:08 - mmengine - INFO - Epoch(val) [32][150/552]    eta: 0:02:37  time: 0.4404  data_time: 0.4286  memory: 593  
2024/05/21 16:52:28 - mmengine - INFO - Epoch(val) [32][200/552]    eta: 0:02:18  time: 0.4023  data_time: 0.3905  memory: 593  
2024/05/21 16:52:46 - mmengine - INFO - Epoch(val) [32][250/552]    eta: 0:01:56  time: 0.3538  data_time: 0.3421  memory: 593  
2024/05/21 16:53:06 - mmengine - INFO - Epoch(val) [32][300/552]    eta: 0:01:38  time: 0.4022  data_time: 0.3901  memory: 593  
2024/05/21 16:53:30 - mmengine - INFO - Epoch(val) [32][350/552]    eta: 0:01:21  time: 0.4868  data_time: 0.4742  memory: 593  
2024/05/21 16:53:50 - mmengine - INFO - Epoch(val) [32][400/552]    eta: 0:01:01  time: 0.4059  data_time: 0.3937  memory: 593  
2024/05/21 16:54:15 - mmengine - INFO - Epoch(val) [32][450/552]    eta: 0:00:42  time: 0.4850  data_time: 0.4728  memory: 593  
2024/05/21 16:54:37 - mmengine - INFO - Epoch(val) [32][500/552]    eta: 0:00:21  time: 0.4515  data_time: 0.4395  memory: 593  
2024/05/21 16:55:01 - mmengine - INFO - Epoch(val) [32][550/552]    eta: 0:00:00  time: 0.4734  data_time: 0.4616  memory: 593  
2024/05/21 16:55:11 - mmengine - INFO - Evaluating bbox...
2024/05/21 16:55:12 - mmengine - INFO - bbox_mAP_copypaste: 0.638 0.756 0.693 -1.000 -1.000 0.638
2024/05/21 16:55:12 - mmengine - INFO - Epoch(val) [32][552/552]    coco/bbox_mAP: 0.6380  coco/bbox_mAP_50: 0.7560  coco/bbox_mAP_75: 0.6930  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.6380  data_time: 0.4093  time: 0.4213
2024/05/21 16:55:12 - mmengine - INFO - The previous best checkpoint /media/iris/Dong/openmmlab/detection/coding/yolov8/yolov8_m_syncbn_fast_8xb16-500e_coco/best_coco_bbox_mAP_epoch_31.pth is removed
2024/05/21 16:55:14 - mmengine - INFO - The best checkpoint with 0.6380 coco/bbox_mAP at 32 epoch is saved to best_coco_bbox_mAP_epoch_32.pth.
2024/05/21 17:00:39 - mmengine - INFO - Epoch(train) [33][ 50/221]  base_lr: 1.0000e-02 lr: 1.4750e-03  eta: 3:27:14  time: 6.4445  data_time: 4.5132  memory: 6804  grad_norm: 86.1246  loss: 53.1984  loss_cls: 17.7593  loss_bbox: 12.5122  loss_dfl: 22.9269
2024/05/21 17:05:19 - mmengine - INFO - Epoch(train) [33][100/221]  base_lr: 1.0000e-02 lr: 1.4750e-03  eta: 3:11:07  time: 5.6152  data_time: 2.4937  memory: 6816  grad_norm: 85.4071  loss: 52.6753  loss_cls: 16.8473  loss_bbox: 12.6802  loss_dfl: 23.1479
2024/05/21 17:09:37 - mmengine - INFO - Epoch(train) [33][150/221]  base_lr: 1.0000e-02 lr: 1.4750e-03  eta: 2:55:31  time: 5.1526  data_time: 4.8564  memory: 6831  grad_norm: 87.2258  loss: 54.1517  loss_cls: 17.5549  loss_bbox: 13.2215  loss_dfl: 23.3753
2024/05/21 17:14:28 - mmengine - INFO - Epoch(train) [33][200/221]  base_lr: 1.0000e-02 lr: 1.4750e-03  eta: 2:40:47  time: 5.8242  data_time: 3.0446  memory: 6804  grad_norm: 89.2986  loss: 51.9392  loss_cls: 16.3343  loss_bbox: 12.1735  loss_dfl: 23.4315
2024/05/21 17:15:56 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 17:15:56 - mmengine - INFO - Saving checkpoint at 33 epochs
2024/05/21 17:16:17 - mmengine - INFO - Epoch(val) [33][ 50/552]    eta: 0:03:02  time: 0.3630  data_time: 0.3506  memory: 6804  
2024/05/21 17:16:38 - mmengine - INFO - Epoch(val) [33][100/552]    eta: 0:02:56  time: 0.4170  data_time: 0.4051  memory: 593  
2024/05/21 17:17:00 - mmengine - INFO - Epoch(val) [33][150/552]    eta: 0:02:44  time: 0.4461  data_time: 0.4339  memory: 593  
2024/05/21 17:17:20 - mmengine - INFO - Epoch(val) [33][200/552]    eta: 0:02:23  time: 0.4076  data_time: 0.3961  memory: 593  
2024/05/21 17:17:39 - mmengine - INFO - Epoch(val) [33][250/552]    eta: 0:02:00  time: 0.3663  data_time: 0.3544  memory: 593  
2024/05/21 17:17:59 - mmengine - INFO - Epoch(val) [33][300/552]    eta: 0:01:41  time: 0.4137  data_time: 0.4020  memory: 593  
2024/05/21 17:18:22 - mmengine - INFO - Epoch(val) [33][350/552]    eta: 0:01:22  time: 0.4584  data_time: 0.4466  memory: 593  
2024/05/21 17:18:46 - mmengine - INFO - Epoch(val) [33][400/552]    eta: 0:01:03  time: 0.4770  data_time: 0.4651  memory: 593  
2024/05/21 17:19:07 - mmengine - INFO - Epoch(val) [33][450/552]    eta: 0:00:42  time: 0.4096  data_time: 0.3974  memory: 593  
2024/05/21 17:19:28 - mmengine - INFO - Epoch(val) [33][500/552]    eta: 0:00:21  time: 0.4258  data_time: 0.4140  memory: 593  
2024/05/21 17:19:54 - mmengine - INFO - Epoch(val) [33][550/552]    eta: 0:00:00  time: 0.5137  data_time: 0.5017  memory: 593  
2024/05/21 17:20:02 - mmengine - INFO - Evaluating bbox...
2024/05/21 17:20:04 - mmengine - INFO - bbox_mAP_copypaste: 0.649 0.769 0.708 -1.000 -1.000 0.649
2024/05/21 17:20:04 - mmengine - INFO - Epoch(val) [33][552/552]    coco/bbox_mAP: 0.6490  coco/bbox_mAP_50: 0.7690  coco/bbox_mAP_75: 0.7080  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.6490  data_time: 0.4145  time: 0.4264
2024/05/21 17:20:04 - mmengine - INFO - The previous best checkpoint /media/iris/Dong/openmmlab/detection/coding/yolov8/yolov8_m_syncbn_fast_8xb16-500e_coco/best_coco_bbox_mAP_epoch_32.pth is removed
2024/05/21 17:20:05 - mmengine - INFO - The best checkpoint with 0.6490 coco/bbox_mAP at 33 epoch is saved to best_coco_bbox_mAP_epoch_33.pth.
2024/05/21 17:25:15 - mmengine - INFO - Epoch(train) [34][ 50/221]  base_lr: 1.0000e-02 lr: 1.2000e-03  eta: 2:20:41  time: 6.1438  data_time: 4.7366  memory: 6816  grad_norm: 86.5239  loss: 51.4331  loss_cls: 16.1070  loss_bbox: 12.8636  loss_dfl: 22.4625
2024/05/21 17:29:54 - mmengine - INFO - Epoch(train) [34][100/221]  base_lr: 1.0000e-02 lr: 1.2000e-03  eta: 2:07:09  time: 5.5807  data_time: 2.2314  memory: 6807  grad_norm: 87.0414  loss: 53.0779  loss_cls: 17.5044  loss_bbox: 12.5012  loss_dfl: 23.0723
2024/05/21 17:34:40 - mmengine - INFO - Epoch(train) [34][150/221]  base_lr: 1.0000e-02 lr: 1.2000e-03  eta: 1:54:06  time: 5.7158  data_time: 2.6396  memory: 6804  grad_norm: 84.9869  loss: 50.5326  loss_cls: 15.8447  loss_bbox: 12.2266  loss_dfl: 22.4613
2024/05/21 17:39:59 - mmengine - INFO - Epoch(train) [34][200/221]  base_lr: 1.0000e-02 lr: 1.2000e-03  eta: 1:41:37  time: 6.3768  data_time: 1.0192  memory: 6804  grad_norm: 88.7623  loss: 52.1120  loss_cls: 16.2210  loss_bbox: 12.4895  loss_dfl: 23.4015
2024/05/21 17:40:55 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 17:40:55 - mmengine - INFO - Saving checkpoint at 34 epochs
2024/05/21 17:41:16 - mmengine - INFO - Epoch(val) [34][ 50/552]    eta: 0:03:04  time: 0.3684  data_time: 0.3564  memory: 6804  
2024/05/21 17:41:34 - mmengine - INFO - Epoch(val) [34][100/552]    eta: 0:02:46  time: 0.3685  data_time: 0.3563  memory: 593  
2024/05/21 17:41:57 - mmengine - INFO - Epoch(val) [34][150/552]    eta: 0:02:39  time: 0.4552  data_time: 0.4430  memory: 593  
2024/05/21 17:42:16 - mmengine - INFO - Epoch(val) [34][200/552]    eta: 0:02:18  time: 0.3860  data_time: 0.3747  memory: 593  
2024/05/21 17:42:35 - mmengine - INFO - Epoch(val) [34][250/552]    eta: 0:01:57  time: 0.3726  data_time: 0.3601  memory: 593  
2024/05/21 17:42:57 - mmengine - INFO - Epoch(val) [34][300/552]    eta: 0:01:40  time: 0.4306  data_time: 0.4188  memory: 593  
2024/05/21 17:43:20 - mmengine - INFO - Epoch(val) [34][350/552]    eta: 0:01:21  time: 0.4570  data_time: 0.4448  memory: 593  
2024/05/21 17:43:43 - mmengine - INFO - Epoch(val) [34][400/552]    eta: 0:01:02  time: 0.4627  data_time: 0.4513  memory: 593  
2024/05/21 17:44:04 - mmengine - INFO - Epoch(val) [34][450/552]    eta: 0:00:42  time: 0.4298  data_time: 0.4181  memory: 593  
2024/05/21 17:44:24 - mmengine - INFO - Epoch(val) [34][500/552]    eta: 0:00:21  time: 0.3931  data_time: 0.3808  memory: 593  
2024/05/21 17:44:49 - mmengine - INFO - Epoch(val) [34][550/552]    eta: 0:00:00  time: 0.5079  data_time: 0.4961  memory: 593  
2024/05/21 17:45:00 - mmengine - INFO - Evaluating bbox...
2024/05/21 17:45:01 - mmengine - INFO - bbox_mAP_copypaste: 0.654 0.773 0.711 -1.000 -1.000 0.654
2024/05/21 17:45:01 - mmengine - INFO - Epoch(val) [34][552/552]    coco/bbox_mAP: 0.6540  coco/bbox_mAP_50: 0.7730  coco/bbox_mAP_75: 0.7110  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.6540  data_time: 0.4091  time: 0.4210
2024/05/21 17:45:01 - mmengine - INFO - The previous best checkpoint /media/iris/Dong/openmmlab/detection/coding/yolov8/yolov8_m_syncbn_fast_8xb16-500e_coco/best_coco_bbox_mAP_epoch_33.pth is removed
2024/05/21 17:45:03 - mmengine - INFO - The best checkpoint with 0.6540 coco/bbox_mAP at 34 epoch is saved to best_coco_bbox_mAP_epoch_34.pth.
2024/05/21 17:50:34 - mmengine - INFO - Epoch(train) [35][ 50/221]  base_lr: 1.0000e-02 lr: 9.2500e-04  eta: 1:24:16  time: 6.5691  data_time: 3.0236  memory: 6807  grad_norm: 85.6559  loss: 50.0579  loss_cls: 15.9506  loss_bbox: 11.7671  loss_dfl: 22.3402
2024/05/21 17:55:42 - mmengine - INFO - Epoch(train) [35][100/221]  base_lr: 1.0000e-02 lr: 9.2500e-04  eta: 1:12:36  time: 6.1541  data_time: 5.4483  memory: 6807  grad_norm: 82.9756  loss: 50.9746  loss_cls: 15.7947  loss_bbox: 12.4071  loss_dfl: 22.7728
2024/05/21 18:00:17 - mmengine - INFO - Epoch(train) [35][150/221]  base_lr: 1.0000e-02 lr: 9.2500e-04  eta: 1:01:10  time: 5.5002  data_time: 4.1582  memory: 6804  grad_norm: 86.9561  loss: 50.8535  loss_cls: 15.7237  loss_bbox: 12.3399  loss_dfl: 22.7899
2024/05/21 18:05:01 - mmengine - INFO - Epoch(train) [35][200/221]  base_lr: 1.0000e-02 lr: 9.2500e-04  eta: 0:50:03  time: 5.6835  data_time: 3.0171  memory: 6807  grad_norm: 90.1264  loss: 49.6081  loss_cls: 15.1921  loss_bbox: 11.7722  loss_dfl: 22.6438
2024/05/21 18:06:21 - mmengine - INFO - Exp name: yolov8_m_syncbn_fast_8xb16-500e_coco_20240521_095416
2024/05/21 18:06:21 - mmengine - INFO - Saving checkpoint at 35 epochs
2024/05/21 18:06:44 - mmengine - INFO - Epoch(val) [35][ 50/552]    eta: 0:03:18  time: 0.3959  data_time: 0.3834  memory: 6804  
2024/05/21 18:07:03 - mmengine - INFO - Epoch(val) [35][100/552]    eta: 0:02:58  time: 0.3960  data_time: 0.3841  memory: 593  
2024/05/21 18:07:27 - mmengine - INFO - Epoch(val) [35][150/552]    eta: 0:02:48  time: 0.4685  data_time: 0.4568  memory: 593  
2024/05/21 18:07:47 - mmengine - INFO - Epoch(val) [35][200/552]    eta: 0:02:26  time: 0.4044  data_time: 0.3925  memory: 593  
2024/05/21 18:08:06 - mmengine - INFO - Epoch(val) [35][250/552]    eta: 0:02:03  time: 0.3731  data_time: 0.3606  memory: 593  
2024/05/21 18:08:27 - mmengine - INFO - Epoch(val) [35][300/552]    eta: 0:01:43  time: 0.4268  data_time: 0.4155  memory: 593  
2024/05/21 18:08:51 - mmengine - INFO - Epoch(val) [35][350/552]    eta: 0:01:24  time: 0.4734  data_time: 0.4616  memory: 593  
2024/05/21 18:09:13 - mmengine - INFO - Epoch(val) [35][400/552]    eta: 0:01:04  time: 0.4495  data_time: 0.4373  memory: 593  
2024/05/21 18:09:36 - mmengine - INFO - Epoch(val) [35][450/552]    eta: 0:00:43  time: 0.4508  data_time: 0.4389  memory: 593  
2024/05/21 18:09:58 - mmengine - INFO - Epoch(val) [35][500/552]    eta: 0:00:22  time: 0.4392  data_time: 0.4272  memory: 593  
2024/05/21 18:10:22 - mmengine - INFO - Epoch(val) [35][550/552]    eta: 0:00:00  time: 0.4908  data_time: 0.4789  memory: 593  
2024/05/21 18:10:29 - mmengine - INFO - Evaluating bbox...
2024/05/21 18:10:30 - mmengine - INFO - bbox_mAP_copypaste: 0.672 0.789 0.728 -1.000 -1.000 0.672
2024/05/21 18:10:30 - mmengine - INFO - Epoch(val) [35][552/552]    coco/bbox_mAP: 0.6720  coco/bbox_mAP_50: 0.7890  coco/bbox_mAP_75: 0.7280  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.6720  data_time: 0.4214  time: 0.4333
2024/05/21 18:10:30 - mmengine - INFO - The previous best checkpoint /media/iris/Dong/openmmlab/detection/coding/yolov8/yolov8_m_syncbn_fast_8xb16-500e_coco/best_coco_bbox_mAP_epoch_34.pth is removed
2024/05/21 18:10:32 - mmengine - INFO - The best checkpoint with 0.6720 coco/bbox_mAP at 35 epoch is saved to best_coco_bbox_mAP_epoch_35.pth.
2024/05/21 18:16:21 - mmengine - INFO - Epoch(train) [36][ 50/221]  base_lr: 1.0000e-02 lr: 6.5000e-04  eta: 0:34:48  time: 6.9294  data_time: 2.7621  memory: 6804  grad_norm: 84.9380  loss: 48.4956  loss_cls: 14.4563  loss_bbox: 11.6750  loss_dfl: 22.3644
2024/05/21 18:21:12 - mmengine - INFO - Epoch(train) [36][100/221]  base_lr: 1.0000e-02 lr: 6.5000e-04  eta: 0:24:20  time: 5.8282  data_time: 1.9858  memory: 6804  grad_norm: 83.5102  loss: 49.0010  loss_cls: 14.8424  loss_bbox: 11.5327  loss_dfl: 22.6258
